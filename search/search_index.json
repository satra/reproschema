{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Reproschema documentation How to use this documentation If you want to know more about the Reproschema project, its goals and the problems it tries to solve: check out our introduction . The Reproschema is related to the Semantic Web and relies on linked data and the JSON-LD format. If you are unfamiliar with such things, head over to our FAQ . You do not need an in depth understanding of what those things are to use the Reproschema but some \"big picture\" conceptual understanding could save you from a lot of confusion. \ud83d\ude09 Not sure how the project is organized? Check out the project structure page. Licence This work is licensed under a Creative Commons Attribution 4.0 International License . Contributing and feedback We are looking for people to give us feedback on this documentation if anything is unclear by opening an issue on our repository . You can also get in touch on our channel on the mattermost Brainhack . If you want to get started right away and contribute directly to this documentation,you can find references and how-to in the about section .","title":"Welcome"},{"location":"#welcome-to-the-reproschema-documentation","text":"","title":"Welcome to the Reproschema documentation"},{"location":"#how-to-use-this-documentation","text":"If you want to know more about the Reproschema project, its goals and the problems it tries to solve: check out our introduction . The Reproschema is related to the Semantic Web and relies on linked data and the JSON-LD format. If you are unfamiliar with such things, head over to our FAQ . You do not need an in depth understanding of what those things are to use the Reproschema but some \"big picture\" conceptual understanding could save you from a lot of confusion. \ud83d\ude09 Not sure how the project is organized? Check out the project structure page.","title":"How to use this documentation"},{"location":"#licence","text":"This work is licensed under a Creative Commons Attribution 4.0 International License .","title":"Licence"},{"location":"#contributing-and-feedback","text":"We are looking for people to give us feedback on this documentation if anything is unclear by opening an issue on our repository . You can also get in touch on our channel on the mattermost Brainhack . If you want to get started right away and contribute directly to this documentation,you can find references and how-to in the about section .","title":"Contributing and feedback"},{"location":"01_introduction/","text":"Introduction Tl;DR - Advantages of the current schema representation Rich contexts for a questionnaire with JSON-LD rather than a \"flat\" csv file. A single source of curated assessments from ReproSchema Library Each item (i.e question), activity (i.e questionnaire), and protocol (i.e set of questionnaires) provides unique and persistent identifiers. Versions of a given questionnaire can be tracked (e.g., PHQ-9, PHQ-8). Allows, supports, and tracks internationalization (e.g. ABCD requires Spanish and English forms). Implementation agnostic \u2013 the schema can be used by several software Uses a linked data graph that can be validated using SHACL . The problem Cognitive and clinical questionnaires and assessments are used throughout neuroscience. There is little consistency in assessment data acquisition or response representation across studies or laboratories. Each project tends to use its own format and data collection tool (e.g., paper, survey tools, RedCap, LORIS). In the long run, this can the source of a lot inefficiencies not only in terms data curation but also by diminishing the value of the data less interoperable and reusable. Imagine for example a researcher wanting to run a meta or mega-analysis across several studies. To do this each one would not only need to know which specific assessments were collected, but also to relate differing column names in data spreadsheets to these assessments and across projects. Several efforts have focused on linking the assessments themselves through consistent terminologies and relationships that map to human cognition (e.g., ( Cognitive Atlas , Cognitive Paradigm Ontology ). Other efforts such as the National Institute for Mental Health (NIMH) Data Archive (NDA) and the National Library of Medicine (NLM) Common Data Elements have curated data elements corresponding to the items and calculated scores from these questionnaires. However, these resources are often used to make data consistent and reusable after, rather than during data collection. However, harmonizing data after acquisition is resource intensive and this approach can create a mismatch between collected and submitted data due to human error during the harmonization process. To faciliate tedious harmonization efforts, several projects, over the last two decades, have developed technologies to automatically or interactively align and harmonize data elements (e.g., BIRN mediator, OpenRefine). Given the dynamic and evolving nature of scientific investigation, many questionnaires are altered when used to suit the requirements of a particular study (e.g., different language, selective and new questions). This information linking the specific information used when asking a question is often decoupled from the data element representing the response to the question. When questions are changed, researchers often shoehorn the response into an existing data element, thus creating additional noise. Another drawback to these data elements is that there is often no way to find out which version of a questionnaire was used or how exactly it was scored. Our solution Our simpler solution is to enforce consistency directly at the data acquisition stage by relying on a common schema that encodes how the different elements of the data and / or the metadata relate to one another. This way, all this relational information between these elements is captured from the very start as it is already embedded in the formal description of the assessment. This solution was inspired by the work of CEDAR Metadata Model . In this project we provide a comprehensive set of tools to create and use the schemas, while tracking the source of the schema, and changes to it over time. The Reproschema project covers: a schema that can be found in the present repository that describes the content and relations of the different elements of a questionnaire or set of assessment tools, an associated curated library of reusable common assessments and questionnaires , a python package to help create and validate the schemas of new assessments, a user interface to visualize questionnaire and collect data locally, a backend server to capture the data remotely. In brief, Reproschema offers a way to standardize the underlying representation of assessment tools. It comes with an open and accessible library of questionnaires with appropriate conversion (e.g., from/to RedCap ) and data collection tools (e.g., MindLogger , RedCap , LORIS - future work ) to enable a more consistent acquisition across projects, with data being harmonized by design. General description With this schema we can represent: at the item level, the elements of an individual assessment, like the questions in a questionnaire at the activity level, an individual assessment that contains a set of items , like for example a whole questionnaire with a several questions. at the protocols level, a collection of activities performed by a participant, e.g a set of questionnaires used in a study. All those elements are specified text files in a JSON-LD format (JavaScript Object Notation for Linked Data) and each item , activity , and protocol provides unique and persistent identifiers. Below we show an example of one of the possible ways a questionnaire with 3 questions for a study could be organized with a protocol for that study, one activity and 3 items . \u251c\u2500\u2500 activities \u2502 \u251c\u2500\u2500 activity1.jsonld \u2502 \u2514\u2500\u2500 items \u2502 \u251c\u2500\u2500 item1.jsonld \u2502 \u251c\u2500\u2500 item2.jsonld \u2502 \u2514\u2500\u2500 item3.jsonld \u2514\u2500\u2500 protocols \u2514\u2500\u2500 protocol1.jsonld The Reproschema can also easily and flexibly specify details about how the schema for an assessment should be used. Independently of what solution is chosen in the end by a researcher, a lab, or an institute to display the assessment to their participants or patients (for example whether using an Web-app written in javascript or a mobile app written in React-native), the schema can already specify: the input type to choose among several user-interface rendering options e.g if an item should be displayed as a Likert scale, a dropdown menu, a multiple choice... the visibility to decide whether a given item or activity should be displayed to the user and under which conditions, the compute logic of how the total score to the responses on a questionnaire should be computed The Reproschema also allows for internationalization and multiple languages support by making it very easy to keep everything the same about a questionnaire and only specify which language should be displayed by the user interface. Finally Reproschema allows tracking of variations and version of different assessments tools (e.g., PHQ-9, PHQ-8).","title":"Introduction"},{"location":"01_introduction/#introduction","text":"Tl;DR - Advantages of the current schema representation Rich contexts for a questionnaire with JSON-LD rather than a \"flat\" csv file. A single source of curated assessments from ReproSchema Library Each item (i.e question), activity (i.e questionnaire), and protocol (i.e set of questionnaires) provides unique and persistent identifiers. Versions of a given questionnaire can be tracked (e.g., PHQ-9, PHQ-8). Allows, supports, and tracks internationalization (e.g. ABCD requires Spanish and English forms). Implementation agnostic \u2013 the schema can be used by several software Uses a linked data graph that can be validated using SHACL .","title":"Introduction"},{"location":"01_introduction/#the-problem","text":"Cognitive and clinical questionnaires and assessments are used throughout neuroscience. There is little consistency in assessment data acquisition or response representation across studies or laboratories. Each project tends to use its own format and data collection tool (e.g., paper, survey tools, RedCap, LORIS). In the long run, this can the source of a lot inefficiencies not only in terms data curation but also by diminishing the value of the data less interoperable and reusable. Imagine for example a researcher wanting to run a meta or mega-analysis across several studies. To do this each one would not only need to know which specific assessments were collected, but also to relate differing column names in data spreadsheets to these assessments and across projects. Several efforts have focused on linking the assessments themselves through consistent terminologies and relationships that map to human cognition (e.g., ( Cognitive Atlas , Cognitive Paradigm Ontology ). Other efforts such as the National Institute for Mental Health (NIMH) Data Archive (NDA) and the National Library of Medicine (NLM) Common Data Elements have curated data elements corresponding to the items and calculated scores from these questionnaires. However, these resources are often used to make data consistent and reusable after, rather than during data collection. However, harmonizing data after acquisition is resource intensive and this approach can create a mismatch between collected and submitted data due to human error during the harmonization process. To faciliate tedious harmonization efforts, several projects, over the last two decades, have developed technologies to automatically or interactively align and harmonize data elements (e.g., BIRN mediator, OpenRefine). Given the dynamic and evolving nature of scientific investigation, many questionnaires are altered when used to suit the requirements of a particular study (e.g., different language, selective and new questions). This information linking the specific information used when asking a question is often decoupled from the data element representing the response to the question. When questions are changed, researchers often shoehorn the response into an existing data element, thus creating additional noise. Another drawback to these data elements is that there is often no way to find out which version of a questionnaire was used or how exactly it was scored.","title":"The problem"},{"location":"01_introduction/#our-solution","text":"Our simpler solution is to enforce consistency directly at the data acquisition stage by relying on a common schema that encodes how the different elements of the data and / or the metadata relate to one another. This way, all this relational information between these elements is captured from the very start as it is already embedded in the formal description of the assessment. This solution was inspired by the work of CEDAR Metadata Model . In this project we provide a comprehensive set of tools to create and use the schemas, while tracking the source of the schema, and changes to it over time. The Reproschema project covers: a schema that can be found in the present repository that describes the content and relations of the different elements of a questionnaire or set of assessment tools, an associated curated library of reusable common assessments and questionnaires , a python package to help create and validate the schemas of new assessments, a user interface to visualize questionnaire and collect data locally, a backend server to capture the data remotely. In brief, Reproschema offers a way to standardize the underlying representation of assessment tools. It comes with an open and accessible library of questionnaires with appropriate conversion (e.g., from/to RedCap ) and data collection tools (e.g., MindLogger , RedCap , LORIS - future work ) to enable a more consistent acquisition across projects, with data being harmonized by design.","title":"Our solution"},{"location":"01_introduction/#general-description","text":"With this schema we can represent: at the item level, the elements of an individual assessment, like the questions in a questionnaire at the activity level, an individual assessment that contains a set of items , like for example a whole questionnaire with a several questions. at the protocols level, a collection of activities performed by a participant, e.g a set of questionnaires used in a study. All those elements are specified text files in a JSON-LD format (JavaScript Object Notation for Linked Data) and each item , activity , and protocol provides unique and persistent identifiers. Below we show an example of one of the possible ways a questionnaire with 3 questions for a study could be organized with a protocol for that study, one activity and 3 items . \u251c\u2500\u2500 activities \u2502 \u251c\u2500\u2500 activity1.jsonld \u2502 \u2514\u2500\u2500 items \u2502 \u251c\u2500\u2500 item1.jsonld \u2502 \u251c\u2500\u2500 item2.jsonld \u2502 \u2514\u2500\u2500 item3.jsonld \u2514\u2500\u2500 protocols \u2514\u2500\u2500 protocol1.jsonld The Reproschema can also easily and flexibly specify details about how the schema for an assessment should be used. Independently of what solution is chosen in the end by a researcher, a lab, or an institute to display the assessment to their participants or patients (for example whether using an Web-app written in javascript or a mobile app written in React-native), the schema can already specify: the input type to choose among several user-interface rendering options e.g if an item should be displayed as a Likert scale, a dropdown menu, a multiple choice... the visibility to decide whether a given item or activity should be displayed to the user and under which conditions, the compute logic of how the total score to the responses on a questionnaire should be computed The Reproschema also allows for internationalization and multiple languages support by making it very easy to keep everything the same about a questionnaire and only specify which language should be displayed by the user interface. Finally Reproschema allows tracking of variations and version of different assessments tools (e.g., PHQ-9, PHQ-8).","title":"General description"},{"location":"100_about_this_doc/","text":"About this documentation This documentation is a work in progress and we wellcome any input: if something is missing or unclear, let us know by [opening an issue on our repository] (???). Serving the doc locally This project uses MkDocs tool with Material theme and extra plugins to generate the website. To test locally, you will need to install the Python dependencies. To do that, type the following commands: git clone https://github.com/ReproNim/reproschema.git cd reproschema pip install -r requirements.txt If you are working on your fork , simply replace https://github.com/ReproNim/reproschema.git by git clone git@github.com/<username>/reproschema.git where <username> is your GitHub username Once done, you need to run MkDocs. Simply type: mkdocs serve Finally, open up http://127.0.0.1:8000/ in your browser, and you should see the default home page of the being displayed.","title":"About this doc"},{"location":"100_about_this_doc/#about-this-documentation","text":"This documentation is a work in progress and we wellcome any input: if something is missing or unclear, let us know by [opening an issue on our repository] (???).","title":"About this documentation"},{"location":"100_about_this_doc/#serving-the-doc-locally","text":"This project uses MkDocs tool with Material theme and extra plugins to generate the website. To test locally, you will need to install the Python dependencies. To do that, type the following commands: git clone https://github.com/ReproNim/reproschema.git cd reproschema pip install -r requirements.txt If you are working on your fork , simply replace https://github.com/ReproNim/reproschema.git by git clone git@github.com/<username>/reproschema.git where <username> is your GitHub username Once done, you need to run MkDocs. Simply type: mkdocs serve Finally, open up http://127.0.0.1:8000/ in your browser, and you should see the default home page of the being displayed.","title":"Serving the doc locally"},{"location":"20_project_structure/","text":"Project structure The Reproschema project is organized around several github repositories. The main ones are the following. Reproschema Reproschema-library Reproschema-ui Reproschema-py A brief description of how they all interact could be along the following lines: If you are about to start a new study that needs you to use some standardized assessments, you can create new Reproschema protocol either by reusing some of the ones that we have already created and are listed in the activities of the Reproschema-library , or by using the tools of Reproschema-py to create the activities describing new questionnaires you might want to use. You can also use the Reproschema-py to make sure that the these activities conform to the specifications described in the Reproschema . Once you have added all the activities to your study protocol , you can use the Reproschema-ui to visualize the protocol and collect data. Reproschema This repository contains the actual Reproschema with the contexts of the schema and the terms that define its different elements and how they relate to each other and to other external entities. This repository also contains SHACL-based validation information in validation , which allows you to ensure that any new protocol , activity or item you create conforms to the specifications of the schema. There is also an example schema that can help give you a quick overview of what the protocol and activity for a study might look like. For more details see the schema section . Reproschema-library This repository hosts all the community curated assessments and questionnaires that support the Reproschema standard. Imagine this as curated library of reusable assessments and questionnaires, from where you can easily pull a copy from rather than having to photocopy a new questionnaire for your next participant or patient. Also you can mix and match items from this library, knowing that the information is tracked in your protocol. All assessments are listed in the activity folder and are served here if you want to visualize them. Reproschema-ui This repository contains the code for the user-interface for the ReproSchema to visualize questionnaires and collect data. You can see it in action here Reproschema-py This is the Reproschema python library. This is a python Command Line Interface (CLI) that allows you to help create and validate the schemas of new assessments. test that a schema for a protocol , activity or item is valid and matches the specification of the Reproschema convert a csv file of a questionnaire into its equivalent Reproschema Other repositories Demo-protocol This repository contain a full fledge protocol that can be used as demonstration. Reprolib-server This contains some additional information on how the activities are served on https://schema.repronim.org/rl/ . Reproschema-builder This repository contains a javascript conversion tool that have been used to create some of our activities, and can be used to convert RedCap data dictionaries to Reproschema.","title":"Project structure"},{"location":"20_project_structure/#project-structure","text":"The Reproschema project is organized around several github repositories. The main ones are the following. Reproschema Reproschema-library Reproschema-ui Reproschema-py A brief description of how they all interact could be along the following lines: If you are about to start a new study that needs you to use some standardized assessments, you can create new Reproschema protocol either by reusing some of the ones that we have already created and are listed in the activities of the Reproschema-library , or by using the tools of Reproschema-py to create the activities describing new questionnaires you might want to use. You can also use the Reproschema-py to make sure that the these activities conform to the specifications described in the Reproschema . Once you have added all the activities to your study protocol , you can use the Reproschema-ui to visualize the protocol and collect data.","title":"Project structure"},{"location":"20_project_structure/#reproschema","text":"This repository contains the actual Reproschema with the contexts of the schema and the terms that define its different elements and how they relate to each other and to other external entities. This repository also contains SHACL-based validation information in validation , which allows you to ensure that any new protocol , activity or item you create conforms to the specifications of the schema. There is also an example schema that can help give you a quick overview of what the protocol and activity for a study might look like. For more details see the schema section .","title":"Reproschema"},{"location":"20_project_structure/#reproschema-library","text":"This repository hosts all the community curated assessments and questionnaires that support the Reproschema standard. Imagine this as curated library of reusable assessments and questionnaires, from where you can easily pull a copy from rather than having to photocopy a new questionnaire for your next participant or patient. Also you can mix and match items from this library, knowing that the information is tracked in your protocol. All assessments are listed in the activity folder and are served here if you want to visualize them.","title":"Reproschema-library"},{"location":"20_project_structure/#reproschema-ui","text":"This repository contains the code for the user-interface for the ReproSchema to visualize questionnaires and collect data. You can see it in action here","title":"Reproschema-ui"},{"location":"20_project_structure/#reproschema-py","text":"This is the Reproschema python library. This is a python Command Line Interface (CLI) that allows you to help create and validate the schemas of new assessments. test that a schema for a protocol , activity or item is valid and matches the specification of the Reproschema convert a csv file of a questionnaire into its equivalent Reproschema","title":"Reproschema-py"},{"location":"20_project_structure/#other-repositories","text":"","title":"Other repositories"},{"location":"20_project_structure/#demo-protocol","text":"This repository contain a full fledge protocol that can be used as demonstration.","title":"Demo-protocol"},{"location":"20_project_structure/#reprolib-server","text":"This contains some additional information on how the activities are served on https://schema.repronim.org/rl/ .","title":"Reprolib-server"},{"location":"20_project_structure/#reproschema-builder","text":"This repository contains a javascript conversion tool that have been used to create some of our activities, and can be used to convert RedCap data dictionaries to Reproschema.","title":"Reproschema-builder"},{"location":"30_schema/","text":"The schema The core model of ReproSchema was initially derived from the CEDAR Metadata Model . To accommodate the needs of neuroimaging and other clinical and behavioral protocols and assessments the schema has evolved significantly. These changes include: Alignment with schema.org and NIDM . We have used schema.org classes and properties where it maps on to the needs of the model and extended the model with NIDM elements to harmonize across ReproNim projects. Allowing for structued nested elements in a schema Protocol > Activity > [Activity | Field > ResponseOption] . This nested structure provides a flexible schema to represent nested activities, which are common in biomedical and other domains. Protocol \u251c\u2500\u2500 Activity \u2502 \u251c\u2500\u2500 Field \u2502 \u2502 \u2514\u2500\u2500 ResponseOption \u2502 \u2514\u2500\u2500 Field \u2502 \u2502 \u2514\u2500\u2500 ResponseOption \u2502 \u251c\u2500\u2500 Activity \u2502 \u2502 \u251c\u2500\u2500 Field \u2502 \u2502 \u2502 \u2514\u2500\u2500 ResponseOption \u2502 \u2502 ... \u2502 ... \u251c\u2500\u2500 Activity \u2502 ... ... Interaction with git/Github or another Web service to deliver a new Protocol, Activity or Field with a persistent URI, while tracking changes associated with any of these elements. By making every Field represented through a persistent URI, a data collection instrument can link the responses to the exact Field that was used. Addition of computable elements that are derived from the values entered by a participant. Allowing for user interface (UI) elements that allow interaction between the schema and any implementation that allows collecting data using the schema. By providing some additional UI elements the provider can guide an implementor to allow for more complex data collection behavior. The ReproSchema-UI is a prototype implementation of an UI that leverages these different elements of the schema. Properties of ReproSchema objects This section lists the core ReproSchema objects and their allowed properties. Protocol A representation of a study which comprises one or more assessments. URI: http://schema.repronim.org/Protocol Name Description URI addProperties An array of objects to describe the various properties added to assessments and fields. http://schema.repronim.org/addProperties allow An array of items indicating properties allowed on an activity or protocol http://schema.repronim.org/allow compute An array of objects indicating computations in an activity or protocol and maps it to the corresponding Field item. scoring logic is a subset of all computations that could be performed and not all computations will be scoring. For example, one may want to do conversion from one unit to another. http://schema.repronim.org/compute landingPage An element (by URL) to point to the protocol readme or landing page. http://schema.repronim.org/landingPage messages An array of objects to define conditional messages in an activity or protocol. http://schema.repronim.org/messages order An ordered list to describe the order in which the items of an assessment or protocol appear in the user interface. http://schema.repronim.org/order overrideProperties An array of objects to override the various properties added to assessments and fields. http://schema.repronim.org/overrideProperties preamble The preamble for an assessment http://schema.repronim.org/preamble shuffle An element (bool) to determine if the list of items is shuffled or in order. http://schema.repronim.org/shuffle about The subject matter of the Field. http://schema.org/about audio An embedded audio object. http://schema.org/audio description A description of the item. http://schema.org/description image An image of the item. This can be a URL or a fully described ImageObject . http://schema.org/image schemaVersion Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application. http://schema.org/schemaVersion version The version of the CreativeWork embodied by a specified resource. http://schema.org/version video An embedded video object. http://schema.org/video altLabel The alternate label. http://www.w3.org/2004/02/skos/core#altLabel prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel Activity An assessment in a protocol. URI: http://schema.repronim.org/Activity Name Description URI addProperties An array of objects to describe the various properties added to assessments and fields. http://schema.repronim.org/addProperties allow An array of items indicating properties allowed on an activity or protocol http://schema.repronim.org/allow compute An array of objects indicating computations in an activity or protocol and maps it to the corresponding Field item. scoring logic is a subset of all computations that could be performed and not all computations will be scoring. For example, one may want to do conversion from one unit to another. http://schema.repronim.org/compute cronTable None http://schema.repronim.org/cronTable messages An array of objects to define conditional messages in an activity or protocol. http://schema.repronim.org/messages order An ordered list to describe the order in which the items of an assessment or protocol appear in the user interface. http://schema.repronim.org/order overrideProperties An array of objects to override the various properties added to assessments and fields. http://schema.repronim.org/overrideProperties preamble The preamble for an assessment http://schema.repronim.org/preamble shuffle An element (bool) to determine if the list of items is shuffled or in order. http://schema.repronim.org/shuffle about The subject matter of the Field. http://schema.org/about audio An embedded audio object. http://schema.org/audio citation A citation or reference to another creative work, such as another publication, web page, scholarly article, etc. http://schema.org/citation description A description of the item. http://schema.org/description image An image of the item. This can be a URL or a fully described ImageObject . http://schema.org/image schemaVersion Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application. http://schema.org/schemaVersion version The version of the CreativeWork embodied by a specified resource. http://schema.org/version video An embedded video object. http://schema.org/video altLabel The alternate label. http://www.w3.org/2004/02/skos/core#altLabel prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel Field An item in an assessment. URI: http://schema.repronim.org/Field Name Description URI additionalNotesObj A set of objects to define notes in a field. For example, most Redcap and NDA data dictionaries have notes for each item which needs to be captured in reproschema. http://schema.repronim.org/additionalNotesObj inputType An element to describe the input type of a Field item. http://schema.repronim.org/inputType preamble The preamble for an assessment http://schema.repronim.org/preamble responseOptions An element (object or by URL)to describe the properties of response of the Field item. http://schema.repronim.org/responseOptions about The subject matter of the Field. http://schema.org/about audio An embedded audio object. http://schema.org/audio description A description of the item. http://schema.org/description image An image of the item. This can be a URL or a fully described ImageObject . http://schema.org/image isPartOf Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of. http://schema.org/isPartOf question A sub property of object. A question. http://schema.org/question readonlyValue Whether or not a property is mutable. Default is false. Specifying this for a property that also has a value makes it act similar to a \"hidden\" input in an HTML form. http://schema.org/readonlyValue schemaVersion Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application. http://schema.org/schemaVersion version The version of the CreativeWork embodied by a specified resource. http://schema.org/version video An embedded video object. http://schema.org/video altLabel The alternate label. http://www.w3.org/2004/02/skos/core#altLabel prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel AdditionalProperty An object to describe the various properties added to assessments and fields. URI: http://schema.repronim.org/AdditionalProperty Name Description URI allow An array of items indicating properties allowed on an activity or protocol http://schema.repronim.org/allow isAbout A pointer to the node describing the item. http://schema.repronim.org/isAbout isVis An element to describe (by boolean or conditional statement) visibility conditions of items in an assessment. http://schema.repronim.org/isVis limit An element to limit the duration (uses ISO 8601) this activity is allowed to be completed by once activity is available. http://schema.repronim.org/limit maxRetakes Defines number of times the item is allowed to be redone. http://schema.repronim.org/maxRetakes randomMaxDelay Present activity/item within some random offset of activity available time up to the maximum specified by this ISO 8601 duration http://schema.repronim.org/randomMaxDelay schedule An element to set make activity available/repeat info using ISO 8601 repeating interval format. http://schema.repronim.org/schedule variableName The name used to represent an item. http://schema.repronim.org/variableName valueRequired Whether the property must be filled in to complete the action. Default is false. http://schema.org/valueRequired prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel OverrideProperty An object to override the various properties added to assessments and fields. URI: http://schema.repronim.org/OverrideProperty Name Description URI isAbout A pointer to the node describing the item. http://schema.repronim.org/isAbout isVis An element to describe (by boolean or conditional statement) visibility conditions of items in an assessment. http://schema.repronim.org/isVis limit An element to limit the duration (uses ISO 8601) this activity is allowed to be completed by once activity is available. http://schema.repronim.org/limit maxRetakes Defines number of times the item is allowed to be redone. http://schema.repronim.org/maxRetakes randomMaxDelay Present activity/item within some random offset of activity available time up to the maximum specified by this ISO 8601 duration http://schema.repronim.org/randomMaxDelay schedule An element to set make activity available/repeat info using ISO 8601 repeating interval format. http://schema.repronim.org/schedule variableName The name used to represent an item. http://schema.repronim.org/variableName valueRequired Whether the property must be filled in to complete the action. Default is false. http://schema.org/valueRequired prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel UnitOption An object to represent a human displayable name alongside the more formal value for units. URI: http://schema.repronim.org/UnitOption Name Description URI value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel ResponseOption An element (object or by URL)to describe the properties of response of the Field item. URI: http://schema.repronim.org/ResponseOption Name Description URI choices An array to list the available options for response of the Field item. http://schema.repronim.org/choices datumType Indicates what type of datum the response is (e.g. range,count,scalar etc.) for the Field item. http://schema.repronim.org/datumType multipleChoice Indicates (by bool) if response for the Field item has one or more answer. http://schema.repronim.org/multipleChoice unitOptions A list of objects to represent a human displayable name alongside the more formal value for units. http://schema.repronim.org/unitOptions valueType The type of the response of an item. For example, string, integer, etc. http://schema.repronim.org/valueType maxValue The upper value of some characteristic or property. http://schema.org/maxValue minValue The lower value of some characteristic or property. http://schema.org/minValue unitCode The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon. http://schema.org/unitCode Choice An object to describe a response option. URI: http://schema.repronim.org/Choice Name Description URI value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value image An image of the item. This can be a URL or a fully described ImageObject . http://schema.org/image name The name of the item. http://schema.org/name ComputeSpecification An object to define computations in an activity or protocol. URI: http://schema.repronim.org/ComputeSpecification Name Description URI jsExpression A JavaScript expression to compute a score from other variables. http://schema.repronim.org/jsExpression variableName The name used to represent an item. http://schema.repronim.org/variableName MessageSpecification An object to define messages in an activity or protocol. URI: http://schema.repronim.org/MessageSpecification Name Description URI jsExpression A JavaScript expression to compute a score from other variables. http://schema.repronim.org/jsExpression message The message to be conditionally displayed for an item. http://schema.repronim.org/message AdditionalNoteObj A set of objects to define notes in a field. For example, most Redcap and NDA data dictionaries have notes for each item which needs to be captured in reproschema URI: http://schema.repronim.org/AdditionalNoteObj Name Description URI column An element to define the column name where the note was taken from. http://schema.repronim.org/column source An element to define the source (eg. RedCap, NDA) where the note was taken from. http://schema.repronim.org/source value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value ResponseActivity Captures information about some action that took place. It also links to information (entities) that were used during the activity URI: http://schema.repronim.org/ResponseActivity Name Description URI endedAtTime None http://www.w3.org/ns/prov#endedAtTime generated None http://www.w3.org/ns/prov#generated startedAtTime None http://www.w3.org/ns/prov#startedAtTime used None http://www.w3.org/ns/prov#used wasAssociatedWith None http://www.w3.org/ns/prov#wasAssociatedWith inLanguage The language of the content or performance or used in an action. Please use one of the language codes from the IETF BCP 47 standard . See also [[availableLanguage]]. http://schema.org/inLanguage Response Describes the response of an item. URI: http://schema.repronim.org/Response Name Description URI wasAttributedTo None http://www.w3.org/ns/prov#wasAttributedTo isAbout A pointer to the node describing the item. http://schema.repronim.org/isAbout value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value Participant An Agent describing characteristics associated with a participant. URI: http://schema.repronim.org/Participant Name Description URI subject_id The identifier of a participant http://purl.org/nidash/nidm#subject_id SoftwareAgent Captures information about some action that took place. It also links to information (entities) that were used during the activity URI: http://schema.repronim.org/SoftwareAgent Name Description URI url URL of the item. http://schema.org/url version The version of the CreativeWork embodied by a specified resource. http://schema.org/version","title":"Schema"},{"location":"30_schema/#the-schema","text":"The core model of ReproSchema was initially derived from the CEDAR Metadata Model . To accommodate the needs of neuroimaging and other clinical and behavioral protocols and assessments the schema has evolved significantly. These changes include: Alignment with schema.org and NIDM . We have used schema.org classes and properties where it maps on to the needs of the model and extended the model with NIDM elements to harmonize across ReproNim projects. Allowing for structued nested elements in a schema Protocol > Activity > [Activity | Field > ResponseOption] . This nested structure provides a flexible schema to represent nested activities, which are common in biomedical and other domains. Protocol \u251c\u2500\u2500 Activity \u2502 \u251c\u2500\u2500 Field \u2502 \u2502 \u2514\u2500\u2500 ResponseOption \u2502 \u2514\u2500\u2500 Field \u2502 \u2502 \u2514\u2500\u2500 ResponseOption \u2502 \u251c\u2500\u2500 Activity \u2502 \u2502 \u251c\u2500\u2500 Field \u2502 \u2502 \u2502 \u2514\u2500\u2500 ResponseOption \u2502 \u2502 ... \u2502 ... \u251c\u2500\u2500 Activity \u2502 ... ... Interaction with git/Github or another Web service to deliver a new Protocol, Activity or Field with a persistent URI, while tracking changes associated with any of these elements. By making every Field represented through a persistent URI, a data collection instrument can link the responses to the exact Field that was used. Addition of computable elements that are derived from the values entered by a participant. Allowing for user interface (UI) elements that allow interaction between the schema and any implementation that allows collecting data using the schema. By providing some additional UI elements the provider can guide an implementor to allow for more complex data collection behavior. The ReproSchema-UI is a prototype implementation of an UI that leverages these different elements of the schema.","title":"The schema"},{"location":"30_schema/#properties-of-reproschema-objects","text":"This section lists the core ReproSchema objects and their allowed properties.","title":"Properties of ReproSchema objects"},{"location":"30_schema/#protocol","text":"A representation of a study which comprises one or more assessments. URI: http://schema.repronim.org/Protocol Name Description URI addProperties An array of objects to describe the various properties added to assessments and fields. http://schema.repronim.org/addProperties allow An array of items indicating properties allowed on an activity or protocol http://schema.repronim.org/allow compute An array of objects indicating computations in an activity or protocol and maps it to the corresponding Field item. scoring logic is a subset of all computations that could be performed and not all computations will be scoring. For example, one may want to do conversion from one unit to another. http://schema.repronim.org/compute landingPage An element (by URL) to point to the protocol readme or landing page. http://schema.repronim.org/landingPage messages An array of objects to define conditional messages in an activity or protocol. http://schema.repronim.org/messages order An ordered list to describe the order in which the items of an assessment or protocol appear in the user interface. http://schema.repronim.org/order overrideProperties An array of objects to override the various properties added to assessments and fields. http://schema.repronim.org/overrideProperties preamble The preamble for an assessment http://schema.repronim.org/preamble shuffle An element (bool) to determine if the list of items is shuffled or in order. http://schema.repronim.org/shuffle about The subject matter of the Field. http://schema.org/about audio An embedded audio object. http://schema.org/audio description A description of the item. http://schema.org/description image An image of the item. This can be a URL or a fully described ImageObject . http://schema.org/image schemaVersion Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application. http://schema.org/schemaVersion version The version of the CreativeWork embodied by a specified resource. http://schema.org/version video An embedded video object. http://schema.org/video altLabel The alternate label. http://www.w3.org/2004/02/skos/core#altLabel prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel","title":"Protocol"},{"location":"30_schema/#activity","text":"An assessment in a protocol. URI: http://schema.repronim.org/Activity Name Description URI addProperties An array of objects to describe the various properties added to assessments and fields. http://schema.repronim.org/addProperties allow An array of items indicating properties allowed on an activity or protocol http://schema.repronim.org/allow compute An array of objects indicating computations in an activity or protocol and maps it to the corresponding Field item. scoring logic is a subset of all computations that could be performed and not all computations will be scoring. For example, one may want to do conversion from one unit to another. http://schema.repronim.org/compute cronTable None http://schema.repronim.org/cronTable messages An array of objects to define conditional messages in an activity or protocol. http://schema.repronim.org/messages order An ordered list to describe the order in which the items of an assessment or protocol appear in the user interface. http://schema.repronim.org/order overrideProperties An array of objects to override the various properties added to assessments and fields. http://schema.repronim.org/overrideProperties preamble The preamble for an assessment http://schema.repronim.org/preamble shuffle An element (bool) to determine if the list of items is shuffled or in order. http://schema.repronim.org/shuffle about The subject matter of the Field. http://schema.org/about audio An embedded audio object. http://schema.org/audio citation A citation or reference to another creative work, such as another publication, web page, scholarly article, etc. http://schema.org/citation description A description of the item. http://schema.org/description image An image of the item. This can be a URL or a fully described ImageObject . http://schema.org/image schemaVersion Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application. http://schema.org/schemaVersion version The version of the CreativeWork embodied by a specified resource. http://schema.org/version video An embedded video object. http://schema.org/video altLabel The alternate label. http://www.w3.org/2004/02/skos/core#altLabel prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel","title":"Activity"},{"location":"30_schema/#field","text":"An item in an assessment. URI: http://schema.repronim.org/Field Name Description URI additionalNotesObj A set of objects to define notes in a field. For example, most Redcap and NDA data dictionaries have notes for each item which needs to be captured in reproschema. http://schema.repronim.org/additionalNotesObj inputType An element to describe the input type of a Field item. http://schema.repronim.org/inputType preamble The preamble for an assessment http://schema.repronim.org/preamble responseOptions An element (object or by URL)to describe the properties of response of the Field item. http://schema.repronim.org/responseOptions about The subject matter of the Field. http://schema.org/about audio An embedded audio object. http://schema.org/audio description A description of the item. http://schema.org/description image An image of the item. This can be a URL or a fully described ImageObject . http://schema.org/image isPartOf Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of. http://schema.org/isPartOf question A sub property of object. A question. http://schema.org/question readonlyValue Whether or not a property is mutable. Default is false. Specifying this for a property that also has a value makes it act similar to a \"hidden\" input in an HTML form. http://schema.org/readonlyValue schemaVersion Indicates (by URL or string) a particular version of a schema used in some CreativeWork. For example, a document could declare a schemaVersion using an URL such as http://schema.org/version/2.0/ if precise indication of schema version was required by some application. http://schema.org/schemaVersion version The version of the CreativeWork embodied by a specified resource. http://schema.org/version video An embedded video object. http://schema.org/video altLabel The alternate label. http://www.w3.org/2004/02/skos/core#altLabel prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel","title":"Field"},{"location":"30_schema/#additionalproperty","text":"An object to describe the various properties added to assessments and fields. URI: http://schema.repronim.org/AdditionalProperty Name Description URI allow An array of items indicating properties allowed on an activity or protocol http://schema.repronim.org/allow isAbout A pointer to the node describing the item. http://schema.repronim.org/isAbout isVis An element to describe (by boolean or conditional statement) visibility conditions of items in an assessment. http://schema.repronim.org/isVis limit An element to limit the duration (uses ISO 8601) this activity is allowed to be completed by once activity is available. http://schema.repronim.org/limit maxRetakes Defines number of times the item is allowed to be redone. http://schema.repronim.org/maxRetakes randomMaxDelay Present activity/item within some random offset of activity available time up to the maximum specified by this ISO 8601 duration http://schema.repronim.org/randomMaxDelay schedule An element to set make activity available/repeat info using ISO 8601 repeating interval format. http://schema.repronim.org/schedule variableName The name used to represent an item. http://schema.repronim.org/variableName valueRequired Whether the property must be filled in to complete the action. Default is false. http://schema.org/valueRequired prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel","title":"AdditionalProperty"},{"location":"30_schema/#overrideproperty","text":"An object to override the various properties added to assessments and fields. URI: http://schema.repronim.org/OverrideProperty Name Description URI isAbout A pointer to the node describing the item. http://schema.repronim.org/isAbout isVis An element to describe (by boolean or conditional statement) visibility conditions of items in an assessment. http://schema.repronim.org/isVis limit An element to limit the duration (uses ISO 8601) this activity is allowed to be completed by once activity is available. http://schema.repronim.org/limit maxRetakes Defines number of times the item is allowed to be redone. http://schema.repronim.org/maxRetakes randomMaxDelay Present activity/item within some random offset of activity available time up to the maximum specified by this ISO 8601 duration http://schema.repronim.org/randomMaxDelay schedule An element to set make activity available/repeat info using ISO 8601 repeating interval format. http://schema.repronim.org/schedule variableName The name used to represent an item. http://schema.repronim.org/variableName valueRequired Whether the property must be filled in to complete the action. Default is false. http://schema.org/valueRequired prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel","title":"OverrideProperty"},{"location":"30_schema/#unitoption","text":"An object to represent a human displayable name alongside the more formal value for units. URI: http://schema.repronim.org/UnitOption Name Description URI value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value prefLabel The preferred label. http://www.w3.org/2004/02/skos/core#prefLabel","title":"UnitOption"},{"location":"30_schema/#responseoption","text":"An element (object or by URL)to describe the properties of response of the Field item. URI: http://schema.repronim.org/ResponseOption Name Description URI choices An array to list the available options for response of the Field item. http://schema.repronim.org/choices datumType Indicates what type of datum the response is (e.g. range,count,scalar etc.) for the Field item. http://schema.repronim.org/datumType multipleChoice Indicates (by bool) if response for the Field item has one or more answer. http://schema.repronim.org/multipleChoice unitOptions A list of objects to represent a human displayable name alongside the more formal value for units. http://schema.repronim.org/unitOptions valueType The type of the response of an item. For example, string, integer, etc. http://schema.repronim.org/valueType maxValue The upper value of some characteristic or property. http://schema.org/maxValue minValue The lower value of some characteristic or property. http://schema.org/minValue unitCode The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon. http://schema.org/unitCode","title":"ResponseOption"},{"location":"30_schema/#choice","text":"An object to describe a response option. URI: http://schema.repronim.org/Choice Name Description URI value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value image An image of the item. This can be a URL or a fully described ImageObject . http://schema.org/image name The name of the item. http://schema.org/name","title":"Choice"},{"location":"30_schema/#computespecification","text":"An object to define computations in an activity or protocol. URI: http://schema.repronim.org/ComputeSpecification Name Description URI jsExpression A JavaScript expression to compute a score from other variables. http://schema.repronim.org/jsExpression variableName The name used to represent an item. http://schema.repronim.org/variableName","title":"ComputeSpecification"},{"location":"30_schema/#messagespecification","text":"An object to define messages in an activity or protocol. URI: http://schema.repronim.org/MessageSpecification Name Description URI jsExpression A JavaScript expression to compute a score from other variables. http://schema.repronim.org/jsExpression message The message to be conditionally displayed for an item. http://schema.repronim.org/message","title":"MessageSpecification"},{"location":"30_schema/#additionalnoteobj","text":"A set of objects to define notes in a field. For example, most Redcap and NDA data dictionaries have notes for each item which needs to be captured in reproschema URI: http://schema.repronim.org/AdditionalNoteObj Name Description URI column An element to define the column name where the note was taken from. http://schema.repronim.org/column source An element to define the source (eg. RedCap, NDA) where the note was taken from. http://schema.repronim.org/source value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value","title":"AdditionalNoteObj"},{"location":"30_schema/#responseactivity","text":"Captures information about some action that took place. It also links to information (entities) that were used during the activity URI: http://schema.repronim.org/ResponseActivity Name Description URI endedAtTime None http://www.w3.org/ns/prov#endedAtTime generated None http://www.w3.org/ns/prov#generated startedAtTime None http://www.w3.org/ns/prov#startedAtTime used None http://www.w3.org/ns/prov#used wasAssociatedWith None http://www.w3.org/ns/prov#wasAssociatedWith inLanguage The language of the content or performance or used in an action. Please use one of the language codes from the IETF BCP 47 standard . See also [[availableLanguage]]. http://schema.org/inLanguage","title":"ResponseActivity"},{"location":"30_schema/#response","text":"Describes the response of an item. URI: http://schema.repronim.org/Response Name Description URI wasAttributedTo None http://www.w3.org/ns/prov#wasAttributedTo isAbout A pointer to the node describing the item. http://schema.repronim.org/isAbout value The value for each option in choices or in additionalNotesObj http://schema.repronim.org/value","title":"Response"},{"location":"30_schema/#participant","text":"An Agent describing characteristics associated with a participant. URI: http://schema.repronim.org/Participant Name Description URI subject_id The identifier of a participant http://purl.org/nidash/nidm#subject_id","title":"Participant"},{"location":"30_schema/#softwareagent","text":"Captures information about some action that took place. It also links to information (entities) that were used during the activity URI: http://schema.repronim.org/SoftwareAgent Name Description URI url URL of the item. http://schema.org/url version The version of the CreativeWork embodied by a specified resource. http://schema.org/version","title":"SoftwareAgent"},{"location":"98_FAQ/","text":"FAQ What is the semantic web? When you request access to a certain document by clicking on a hyperlink, the computer will give a visual rendering of the html code of this document. But computer used to do that in pretty \"silly\" fashion: it would give you a human-readable version of the content, but the computer would not make the distinction if a certain element in the webpage (for example a paragraph) was referring to a person or a place or a song. What the semantic wed allows is to \"inject\" additional information into a webpage so that a machine can know what certain elements are about (e.g \" this image is about a cat. \") or how they are linked to other elements (on the same page or somewhere else on the web). The tagged content of a webpage thus acquires \"meaning\" from the point of view of the computer, making the semantic content of the code machine-readable. More info wikipedia article on the semantic web A short video intro to the semantic web by Manu Sporny: What is linked data? The theory The same way that an element in webpage could be given \"meaning\" by tagging with extra information about the nature of this element, the same can be done with data. Hence a given row on a spreadsheet stored somewhere on the web can be tagged and linked to another piece of data on another website. \" Linked data is a way to create a network of standards-based machine interpretable data across different documents and Web sites. It allows an application to start at one piece of Linked Data, and follow embedded links to other pieces of Linked Data that are hosted on different sites across the Web. \" [ source ] Linked data has some basic principles behind it ( adapted from wikipedia ): Use Unique Resources identifiers (URI) to name (identify) things. Use HTTP URIs so that these things can be looked up. Provide useful information about what a name identifies when it's looked up. Refer to other things using their HTTP URI-based names when publishing data on the Web. A more concrete example As things might be be quite abstract, here is a simple example of linked data to help make things more concrete: { \"@context\": \"http://schema.org\", \"name\": \"Barack Obama\", \"givenName\": \"Barack\", \"familyName\": \"Obama\", \"jobTitle\": \"44th President of the United States\" } You can see that the file is organised in pairs of \"key\": \"value\" . The @context gives you the base URL of the website where you can find more information about the different properties of this piece of data. What follows ( name , givenNAme , familyName , ...) are the actual properties about this data and in front of it the values that this data takes for each property (in this case: \"Barack Obama\", \"Barack\", \"Obama\"). Now go and look up what is hiding behind one of those property by going to the URL made of the base URL + the property name , for example https://schema.org/familyName . This is the HTTP URI of familyName and this gives you a description of the familyName property. Well \" So what? \" you might say. Well it also tells you which type of data this property it can be applied to: in this case, the Person type (see its description here ). So even though, we never wrote anywhere explicitly that this data describes a person, a computer able to parse that piece of linked data above would \"know\" this. More info Here is a TED talk by Tim Berners-Lee on linked data. A short video intro to linked data by Manu Sporny: What is JSON-LD? What is JSON? OK before we go for JSON-LD, let's start with JSON. JSON stands for JavaScript Object Notation and is just a specific format for a text file. This type of text file is very often used by website when they need to transmit information to one another. If you want to see an example of how this works, here is dummy example of the response to a request made by one website to another about a list of employees. By default the output of this dummy example is presented in a way that is more pleasing to the human eye, but if you click on Raw Data , you will see the raw unformatted JSON file that was returned by the website. Copy-paste in a text editor, it should like the big ugly and scary one-liner below that we, mere mortals, have no idea what to do with, but that a computer has no problem making sense of. Insert image ??? {\"status\":\"success\",\"data\":[{\"id\":\"1\",\"employee_name\":\"Tiger Nixon\",\"employee_salary\":\"320800\",\"employee_age\":\"61\",\"profile_image\":\"\"},{\"id\":\"2\",\"employee_name\":\"Garrett Winters\",\"employee_salary\":\"170750\",\"employee_age\":\"63\",\"profile_image\":\"\"},{\"id\":\"3\",\"employee_name\":\"Ashton Cox\",\"employee_salary\":\"86000\",\"employee_age\":\"66\",\"profile_image\":\"\"},{\"id\":\"4\",\"employee_name\":\"Cedric Kelly\",\"employee_salary\":\"433060\",\"employee_age\":\"22\",\"profile_image\":\"\"},{\"id\":\"5\",\"employee_name\":\"Airi Satou\",\"employee_salary\":\"162700\",\"employee_age\":\"33\",\"profile_image\":\"\"},{\"id\":\"6\",\"employee_name\":\"Brielle Williamson\",\"employee_salary\":\"372000\",\"employee_age\":\"61\",\"profile_image\":\"\"},{\"id\":\"7\",\"employee_name\":\"Herrod Chandler\",\"employee_salary\":\"137500\",\"employee_age\":\"59\",\"profile_image\":\"\"},{\"id\":\"8\",\"employee_name\":\"Rhona Davidson\",\"employee_salary\":\"327900\",\"employee_age\":\"55\",\"profile_image\":\"\"},{\"id\":\"9\",\"employee_name\":\"Colleen Hurst\",\"employee_salary\":\"205500\",\"employee_age\":\"39\",\"profile_image\":\"\"},{\"id\":\"10\",\"employee_name\":\"Sonya Frost\",\"employee_salary\":\"103600\",\"employee_age\":\"23\",\"profile_image\":\"\"},{\"id\":\"11\",\"employee_name\":\"Jena Gaines\",\"employee_salary\":\"90560\",\"employee_age\":\"30\",\"profile_image\":\"\"},{\"id\":\"12\",\"employee_name\":\"Quinn Flynn\",\"employee_salary\":\"342000\",\"employee_age\":\"22\",\"profile_image\":\"\"},{\"id\":\"13\",\"employee_name\":\"Charde Marshall\",\"employee_salary\":\"470600\",\"employee_age\":\"36\",\"profile_image\":\"\"},{\"id\":\"14\",\"employee_name\":\"Haley Kennedy\",\"employee_salary\":\"313500\",\"employee_age\":\"43\",\"profile_image\":\"\"},{\"id\":\"15\",\"employee_name\":\"Tatyana Fitzpatrick\",\"employee_salary\":\"385750\",\"employee_age\":\"19\",\"profile_image\":\"\"},{\"id\":\"16\",\"employee_name\":\"Michael Silva\",\"employee_salary\":\"198500\",\"employee_age\":\"66\",\"profile_image\":\"\"},{\"id\":\"17\",\"employee_name\":\"Paul Byrd\",\"employee_salary\":\"725000\",\"employee_age\":\"64\",\"profile_image\":\"\"},{\"id\":\"18\",\"employee_name\":\"Gloria Little\",\"employee_salary\":\"237500\",\"employee_age\":\"59\",\"profile_image\":\"\"},{\"id\":\"19\",\"employee_name\":\"Bradley Greer\",\"employee_salary\":\"132000\",\"employee_age\":\"41\",\"profile_image\":\"\"},{\"id\":\"20\",\"employee_name\":\"Dai Rios\",\"employee_salary\":\"217500\",\"employee_age\":\"35\",\"profile_image\":\"\"},{\"id\":\"21\",\"employee_name\":\"Jenette Caldwell\",\"employee_salary\":\"345000\",\"employee_age\":\"30\",\"profile_image\":\"\"},{\"id\":\"22\",\"employee_name\":\"Yuri Berry\",\"employee_salary\":\"675000\",\"employee_age\":\"40\",\"profile_image\":\"\"},{\"id\":\"23\",\"employee_name\":\"Caesar Vance\",\"employee_salary\":\"106450\",\"employee_age\":\"21\",\"profile_image\":\"\"},{\"id\":\"24\",\"employee_name\":\"Doris Wilder\",\"employee_salary\":\"85600\",\"employee_age\":\"23\",\"profile_image\":\"\"}]} By the way, if you ever come across such monstrosity and you want to turn into something you as a human being can understand (or least read), you can copy-paste it in a validator-formatter like jsonformatter or jsonlint . This will quickly tell you a) whether this is a valid JSON format (eaning if it respects the rules of how a JSON file should be formatted) and b) it will highlight and help you navigate the nested and hierarchical nature of the JSON file. Insert image ??? OK but let's start with a much simpler example of a JSON file, like the one below which could be the content of JSON file returned by a website when asked about a certain person. { \"name\": \"Barack Obama\", \"givenName\": \"Barack\", \"familyName\": \"Obama\", \"jobTitle\": \"44th President of the United States\" } Looks familiar? It is very close to the one we had at the end of the previous FAQ section. From JSON to JSON-LD Now say you would like to use this JSON file to represent a piece of linked-data. The only thing you would need to do in this specific case is to provide the @context line we saw before that will give a precise and unambiguous meaning to the following lines. { \"@context\": \"http://schema.org\", \"name\": \"Barack Obama\", \"givenName\": \"Barack\", \"familyName\": \"Obama\", \"jobTitle\": \"44th President of the United States\" } \ud83c\udf89 Congratulations! \ud83c\udf89 You now have a valid JSON-LD. If you want to make sure it is valid, you can copy-paste that into the JSON-LD playground . If you to to visualize the \"linked\" aspect of that data, you can click on the Visualized tab and this will give you a graph where that connects the different nodes (piece of information to one another). If you want to visualize a more complex graph, we can try that with one of the JSON-LD file that describe one of the protocols of the reproschema like the one here . Actually if you want to test get the raw content of the file you should click on Raw . You can then either use the raw content of the file or the URL of this raw file which should be something like: https://raw.githubusercontent.com/ReproNim/reproschema/master/protocols/VoicePilot/VoicePilot_schema directly into the JSON-LD playground to see whether it is a valid JSON-LD and how the different elements are connected. More info It would be a stretch to say that the JSON-LD specifications make for a fascinating read that will keep you up at night (although they might but mostly out of frustration) but it is good to know that it is out there in case you eventually need to look something up Two short videos by Manu Sporny about JSON-LD and core mark up features JSON-LD: Why is linked data important for the Reproschema ? Which assessments tools will/are supporting this standard? At the moment, all the assessments that support this standard are listed in this folder or the Reproschema-library repository . If you want to see those different tools in action using our user interface, you can explore them on schema.repronim.org/ . The Reproschema is also used to develop a checklist to improve methods and results reporting in neuroimaging . \ud83d\udee0 Work in progress \ud83d\udee0 Why should I use Reproschema? \ud83d\udee0 Work in progress \ud83d\udee0 Who is Reproschema for? \ud83d\udee0 Work in progress \ud83d\udee0 How can I know if a certain property is supported by Reproschema? \ud83d\udee0 Work in progress \ud83d\udee0 How can I add a property to my schema? \ud83d\udee0 Work in progress \ud83d\udee0 How are these assessments licensed? \ud83d\udee0 Work in progress \ud83d\udee0 How can I contribute to the project? \ud83d\udee0 Work in progress \ud83d\udee0 An assessment tool I regularly use is not supported by Reproschema: how can I add it? \ud83d\udee0 Work in progress \ud83d\udee0 How can I visualize the schema for a protocol or an activity ? If you want to see what the assessment that are already supported by the Reproschema would look like using our Reproschema user-interface, you can visualize them directly on schema.repronim.org . If you just want to view a protocol or activity you are developing using the reproschema-ui , you can pass the URL of the schema to the url query parameter like this: https://schema.repronim.org/ui/#/?url=url-to-your-schema If you are hosting a schema on github, make sure that you are passing the URL of the raw content of the schema. For example, our demo protocol can be accessed at this URL: https://github.com/ReproNim/demo-protocol/blob/master/VoicePilot/VoicePilot_schema But to get access to the raw content of that file you must click on the Raw button once you have opened that page on github that will open this URL: https://raw.githubusercontent.com/ReproNim/demo-protocol/master/VoicePilot/VoicePilot_schema . If you want to visualize the graph represented by the JSON-LD file, we explain how to do this in From JSON to JSON-LD .","title":"FAQ"},{"location":"98_FAQ/#faq","text":"","title":"FAQ"},{"location":"98_FAQ/#what-is-the-semantic-web","text":"When you request access to a certain document by clicking on a hyperlink, the computer will give a visual rendering of the html code of this document. But computer used to do that in pretty \"silly\" fashion: it would give you a human-readable version of the content, but the computer would not make the distinction if a certain element in the webpage (for example a paragraph) was referring to a person or a place or a song. What the semantic wed allows is to \"inject\" additional information into a webpage so that a machine can know what certain elements are about (e.g \" this image is about a cat. \") or how they are linked to other elements (on the same page or somewhere else on the web). The tagged content of a webpage thus acquires \"meaning\" from the point of view of the computer, making the semantic content of the code machine-readable.","title":"What is the semantic web?"},{"location":"98_FAQ/#more-info","text":"wikipedia article on the semantic web A short video intro to the semantic web by Manu Sporny:","title":"More info"},{"location":"98_FAQ/#what-is-linked-data","text":"","title":"What is linked data?"},{"location":"98_FAQ/#the-theory","text":"The same way that an element in webpage could be given \"meaning\" by tagging with extra information about the nature of this element, the same can be done with data. Hence a given row on a spreadsheet stored somewhere on the web can be tagged and linked to another piece of data on another website. \" Linked data is a way to create a network of standards-based machine interpretable data across different documents and Web sites. It allows an application to start at one piece of Linked Data, and follow embedded links to other pieces of Linked Data that are hosted on different sites across the Web. \" [ source ] Linked data has some basic principles behind it ( adapted from wikipedia ): Use Unique Resources identifiers (URI) to name (identify) things. Use HTTP URIs so that these things can be looked up. Provide useful information about what a name identifies when it's looked up. Refer to other things using their HTTP URI-based names when publishing data on the Web.","title":"The theory"},{"location":"98_FAQ/#a-more-concrete-example","text":"As things might be be quite abstract, here is a simple example of linked data to help make things more concrete: { \"@context\": \"http://schema.org\", \"name\": \"Barack Obama\", \"givenName\": \"Barack\", \"familyName\": \"Obama\", \"jobTitle\": \"44th President of the United States\" } You can see that the file is organised in pairs of \"key\": \"value\" . The @context gives you the base URL of the website where you can find more information about the different properties of this piece of data. What follows ( name , givenNAme , familyName , ...) are the actual properties about this data and in front of it the values that this data takes for each property (in this case: \"Barack Obama\", \"Barack\", \"Obama\"). Now go and look up what is hiding behind one of those property by going to the URL made of the base URL + the property name , for example https://schema.org/familyName . This is the HTTP URI of familyName and this gives you a description of the familyName property. Well \" So what? \" you might say. Well it also tells you which type of data this property it can be applied to: in this case, the Person type (see its description here ). So even though, we never wrote anywhere explicitly that this data describes a person, a computer able to parse that piece of linked data above would \"know\" this.","title":"A more concrete example"},{"location":"98_FAQ/#more-info_1","text":"Here is a TED talk by Tim Berners-Lee on linked data. A short video intro to linked data by Manu Sporny:","title":"More info"},{"location":"98_FAQ/#what-is-json-ld","text":"","title":"What is JSON-LD?"},{"location":"98_FAQ/#what-is-json","text":"OK before we go for JSON-LD, let's start with JSON. JSON stands for JavaScript Object Notation and is just a specific format for a text file. This type of text file is very often used by website when they need to transmit information to one another. If you want to see an example of how this works, here is dummy example of the response to a request made by one website to another about a list of employees. By default the output of this dummy example is presented in a way that is more pleasing to the human eye, but if you click on Raw Data , you will see the raw unformatted JSON file that was returned by the website. Copy-paste in a text editor, it should like the big ugly and scary one-liner below that we, mere mortals, have no idea what to do with, but that a computer has no problem making sense of. Insert image ??? {\"status\":\"success\",\"data\":[{\"id\":\"1\",\"employee_name\":\"Tiger Nixon\",\"employee_salary\":\"320800\",\"employee_age\":\"61\",\"profile_image\":\"\"},{\"id\":\"2\",\"employee_name\":\"Garrett Winters\",\"employee_salary\":\"170750\",\"employee_age\":\"63\",\"profile_image\":\"\"},{\"id\":\"3\",\"employee_name\":\"Ashton Cox\",\"employee_salary\":\"86000\",\"employee_age\":\"66\",\"profile_image\":\"\"},{\"id\":\"4\",\"employee_name\":\"Cedric Kelly\",\"employee_salary\":\"433060\",\"employee_age\":\"22\",\"profile_image\":\"\"},{\"id\":\"5\",\"employee_name\":\"Airi Satou\",\"employee_salary\":\"162700\",\"employee_age\":\"33\",\"profile_image\":\"\"},{\"id\":\"6\",\"employee_name\":\"Brielle Williamson\",\"employee_salary\":\"372000\",\"employee_age\":\"61\",\"profile_image\":\"\"},{\"id\":\"7\",\"employee_name\":\"Herrod Chandler\",\"employee_salary\":\"137500\",\"employee_age\":\"59\",\"profile_image\":\"\"},{\"id\":\"8\",\"employee_name\":\"Rhona Davidson\",\"employee_salary\":\"327900\",\"employee_age\":\"55\",\"profile_image\":\"\"},{\"id\":\"9\",\"employee_name\":\"Colleen Hurst\",\"employee_salary\":\"205500\",\"employee_age\":\"39\",\"profile_image\":\"\"},{\"id\":\"10\",\"employee_name\":\"Sonya Frost\",\"employee_salary\":\"103600\",\"employee_age\":\"23\",\"profile_image\":\"\"},{\"id\":\"11\",\"employee_name\":\"Jena Gaines\",\"employee_salary\":\"90560\",\"employee_age\":\"30\",\"profile_image\":\"\"},{\"id\":\"12\",\"employee_name\":\"Quinn Flynn\",\"employee_salary\":\"342000\",\"employee_age\":\"22\",\"profile_image\":\"\"},{\"id\":\"13\",\"employee_name\":\"Charde Marshall\",\"employee_salary\":\"470600\",\"employee_age\":\"36\",\"profile_image\":\"\"},{\"id\":\"14\",\"employee_name\":\"Haley Kennedy\",\"employee_salary\":\"313500\",\"employee_age\":\"43\",\"profile_image\":\"\"},{\"id\":\"15\",\"employee_name\":\"Tatyana Fitzpatrick\",\"employee_salary\":\"385750\",\"employee_age\":\"19\",\"profile_image\":\"\"},{\"id\":\"16\",\"employee_name\":\"Michael Silva\",\"employee_salary\":\"198500\",\"employee_age\":\"66\",\"profile_image\":\"\"},{\"id\":\"17\",\"employee_name\":\"Paul Byrd\",\"employee_salary\":\"725000\",\"employee_age\":\"64\",\"profile_image\":\"\"},{\"id\":\"18\",\"employee_name\":\"Gloria Little\",\"employee_salary\":\"237500\",\"employee_age\":\"59\",\"profile_image\":\"\"},{\"id\":\"19\",\"employee_name\":\"Bradley Greer\",\"employee_salary\":\"132000\",\"employee_age\":\"41\",\"profile_image\":\"\"},{\"id\":\"20\",\"employee_name\":\"Dai Rios\",\"employee_salary\":\"217500\",\"employee_age\":\"35\",\"profile_image\":\"\"},{\"id\":\"21\",\"employee_name\":\"Jenette Caldwell\",\"employee_salary\":\"345000\",\"employee_age\":\"30\",\"profile_image\":\"\"},{\"id\":\"22\",\"employee_name\":\"Yuri Berry\",\"employee_salary\":\"675000\",\"employee_age\":\"40\",\"profile_image\":\"\"},{\"id\":\"23\",\"employee_name\":\"Caesar Vance\",\"employee_salary\":\"106450\",\"employee_age\":\"21\",\"profile_image\":\"\"},{\"id\":\"24\",\"employee_name\":\"Doris Wilder\",\"employee_salary\":\"85600\",\"employee_age\":\"23\",\"profile_image\":\"\"}]} By the way, if you ever come across such monstrosity and you want to turn into something you as a human being can understand (or least read), you can copy-paste it in a validator-formatter like jsonformatter or jsonlint . This will quickly tell you a) whether this is a valid JSON format (eaning if it respects the rules of how a JSON file should be formatted) and b) it will highlight and help you navigate the nested and hierarchical nature of the JSON file. Insert image ??? OK but let's start with a much simpler example of a JSON file, like the one below which could be the content of JSON file returned by a website when asked about a certain person. { \"name\": \"Barack Obama\", \"givenName\": \"Barack\", \"familyName\": \"Obama\", \"jobTitle\": \"44th President of the United States\" } Looks familiar? It is very close to the one we had at the end of the previous FAQ section.","title":"What is JSON?"},{"location":"98_FAQ/#from-json-to-json-ld","text":"Now say you would like to use this JSON file to represent a piece of linked-data. The only thing you would need to do in this specific case is to provide the @context line we saw before that will give a precise and unambiguous meaning to the following lines. { \"@context\": \"http://schema.org\", \"name\": \"Barack Obama\", \"givenName\": \"Barack\", \"familyName\": \"Obama\", \"jobTitle\": \"44th President of the United States\" } \ud83c\udf89 Congratulations! \ud83c\udf89 You now have a valid JSON-LD. If you want to make sure it is valid, you can copy-paste that into the JSON-LD playground . If you to to visualize the \"linked\" aspect of that data, you can click on the Visualized tab and this will give you a graph where that connects the different nodes (piece of information to one another). If you want to visualize a more complex graph, we can try that with one of the JSON-LD file that describe one of the protocols of the reproschema like the one here . Actually if you want to test get the raw content of the file you should click on Raw . You can then either use the raw content of the file or the URL of this raw file which should be something like: https://raw.githubusercontent.com/ReproNim/reproschema/master/protocols/VoicePilot/VoicePilot_schema directly into the JSON-LD playground to see whether it is a valid JSON-LD and how the different elements are connected.","title":"From JSON to JSON-LD"},{"location":"98_FAQ/#more-info_2","text":"It would be a stretch to say that the JSON-LD specifications make for a fascinating read that will keep you up at night (although they might but mostly out of frustration) but it is good to know that it is out there in case you eventually need to look something up Two short videos by Manu Sporny about JSON-LD and core mark up features JSON-LD:","title":"More info"},{"location":"98_FAQ/#why-is-linked-data-important-for-the-reproschema","text":"","title":"Why is linked data important for the Reproschema ?"},{"location":"98_FAQ/#which-assessments-tools-willare-supporting-this-standard","text":"At the moment, all the assessments that support this standard are listed in this folder or the Reproschema-library repository . If you want to see those different tools in action using our user interface, you can explore them on schema.repronim.org/ . The Reproschema is also used to develop a checklist to improve methods and results reporting in neuroimaging . \ud83d\udee0 Work in progress \ud83d\udee0","title":"Which assessments tools will/are supporting this standard?"},{"location":"98_FAQ/#why-should-i-use-reproschema","text":"\ud83d\udee0 Work in progress \ud83d\udee0","title":"Why should I use Reproschema?"},{"location":"98_FAQ/#who-is-reproschema-for","text":"\ud83d\udee0 Work in progress \ud83d\udee0","title":"Who is Reproschema for?"},{"location":"98_FAQ/#how-can-i-know-if-a-certain-property-is-supported-by-reproschema","text":"\ud83d\udee0 Work in progress \ud83d\udee0","title":"How can I know if a certain property is supported by Reproschema?"},{"location":"98_FAQ/#how-can-i-add-a-property-to-my-schema","text":"\ud83d\udee0 Work in progress \ud83d\udee0","title":"How can I add a property to my schema?"},{"location":"98_FAQ/#how-are-these-assessments-licensed","text":"\ud83d\udee0 Work in progress \ud83d\udee0","title":"How are these assessments licensed?"},{"location":"98_FAQ/#how-can-i-contribute-to-the-project","text":"\ud83d\udee0 Work in progress \ud83d\udee0","title":"How can I contribute to the project?"},{"location":"98_FAQ/#an-assessment-tool-i-regularly-use-is-not-supported-by-reproschema-how-can-i-add-it","text":"\ud83d\udee0 Work in progress \ud83d\udee0","title":"An assessment tool I regularly use is not supported by Reproschema: how can I add it?"},{"location":"98_FAQ/#how-can-i-visualize-the-schema-for-a-protocol-or-an-activity","text":"If you want to see what the assessment that are already supported by the Reproschema would look like using our Reproschema user-interface, you can visualize them directly on schema.repronim.org . If you just want to view a protocol or activity you are developing using the reproschema-ui , you can pass the URL of the schema to the url query parameter like this: https://schema.repronim.org/ui/#/?url=url-to-your-schema If you are hosting a schema on github, make sure that you are passing the URL of the raw content of the schema. For example, our demo protocol can be accessed at this URL: https://github.com/ReproNim/demo-protocol/blob/master/VoicePilot/VoicePilot_schema But to get access to the raw content of that file you must click on the Raw button once you have opened that page on github that will open this URL: https://raw.githubusercontent.com/ReproNim/demo-protocol/master/VoicePilot/VoicePilot_schema . If you want to visualize the graph represented by the JSON-LD file, we explain how to do this in From JSON to JSON-LD .","title":"How can I visualize the schema for a protocol or an activity?"},{"location":"99_glossary/","text":"Glossary activity compute specification input type item JSON JSON-LD protocol SHACL visibility","title":"Glossary"},{"location":"99_glossary/#glossary","text":"activity compute specification input type item JSON JSON-LD protocol SHACL visibility","title":"Glossary"}]}